// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id    Int     @default(autoincrement()) @id
  name String
  industry  String?
  email String  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users User[]
}
model User {
  id    Int     @default(autoincrement()) @id
  firstName String
  lastName  String
  email String  @unique
  role String?
  idpId String?
  rut String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId Int?
  createdTasks   Task[]   @relation("Creator")
  revisedTasks   Task[]   @relation("Revisor")
}

model Task {
  id                 Int      @id @default(autoincrement())
  title              String
  state              TaskState @default(PENDING)
  instruction        String
  comments           String?
  videoUrl           String?
  audioTranscription String?
  assignationDate    DateTime?
  requiredSendDate   DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  creator            User     @relation("Creator", fields: [creatorUserId], references: [id])
  creatorUserId      Int
  revisor            User?    @relation("Revisor", fields: [revisorUserId], references: [id])
  revisorUserId      Int?
  criticActivities  CriticActivity[]
}

enum TaskState {
  PENDING
  IN_PROGRESS
  COMPLETED
  REVIEWED
}

model CriticActivity {
  id      Int    @id @default(autoincrement())
  title   String
  task    Task   @relation(fields: [taskId], references: [id])
  taskId  Int

  @@map("critic_activities")
}
