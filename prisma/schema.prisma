generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  industry  String?
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model User {
  id           Int       @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  customerId   Int?
  idpId        String?
  role         String?
  lastLogin    DateTime?
  createdTasks Task[]    @relation("Creator")
  revisedTasks Task[]    @relation("Revisor")
  customer     Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Task {
  id                 Int              @id @default(autoincrement())
  title              String
  state              TaskState        @default(PENDING)
  instruction        String
  comments           String?
  changeHistory      String?
  assignationDate    DateTime?
  requiredSendDate   DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  creatorUserId      Int
  revisorUserId      Int?
  criticActivities   CriticActivity[]
  multimedia Multimedia[]
  controlStrategies  ControlStrategy[]
  creator            User             @relation("Creator", fields: [creatorUserId], references: [id])
  revisor            User?            @relation("Revisor", fields: [revisorUserId], references: [id])
}

model CriticActivity {
  id     Int    @id(map: "critic_activities_pkey") @default(autoincrement())
  title  String
  taskId Int
  task   Task   @relation(fields: [taskId], references: [id], map: "critic_activities_taskId_fkey")
  @@map("CriticActivity")
}

enum TaskState {
  PENDING
  IN_PROGRESS
  COMPLETED
  REVIEWED
}

model Multimedia {
  id                 Int      @id @default(autoincrement())
  taskId             Int
  photoUrl           String?
  videoUrl           String?
  audioTranscription String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], map: "multimedia_taskId_fkey")

  @@map("Multimedia")
}

model ControlStrategy {
  id     Int    @id @default(autoincrement())
  title  String
  taskId Int

  task   Task   @relation(fields: [taskId], references: [id], map: "control_strategy_taskId_fkey")

  @@map("ControlStrategy")
}